#!/bin/bash

dialect=$(snapctl get dialect)
mysql_host=$(snapctl get mysql.host)
mysql_user=$(snapctl get mysql.user)
mysql_name=$(snapctl get mysql.name)
mysql_pass=$(snapctl get mysql.pass)
postgres_host=$(snapctl get postgres.host)
postgres_user=$(snapctl get postgres.user)
postgres_name=$(snapctl get postgres.name)
postgres_pass=$(snapctl get postgres.pass)
port=$(snapctl get port)
interface=$(snapctl get interface)
cookie_hash=$(snapctl get cookie-hash)
cookie_encryption=$(snapctl get cookie-encryption)
access_key_encryption=$(snapctl get access-key-encryption)
runner_registration_token=$(snapctl get runner-registration-token)


email_sender=$(snapctl get email-sender)
email_host=$(snapctl get email-host)
email_port=$(snapctl get email-port)
email_secure=$(snapctl get email-secure)
email_username=$(snapctl get email-username)
email_password=$(snapctl get email-password)
web_host=$(snapctl get web-host)

ldap_binddn=$(snapctl get ldap-binddn)
ldap_bindpassword=$(snapctl get ldap-bindpassword)
ldap_server=$(snapctl get ldap-server)
ldap_searchdn=$(snapctl get ldap-searchdn)
ldap_searchfilter=$(snapctl get ldap-searchfilter)

ldap_mappings_dn=$(snapctl get ldap-mappings.dn)
ldap_mappings_mail=$(snapctl get ldap-mappings.mail)
ldap_mappings_uid=$(snapctl get ldap-mappings.uid)
ldap_mappings_cn=$(snapctl get ldap-mappings.cn)

telegram_chat=$(snapctl get telegram-chat)
telegram_token=$(snapctl get telegram-token)
concurrency_mode=$(snapctl get concurrency-mode)
max_parallel_tasks=$(snapctl get max-parallel-tasks)

ldap_enable=$(snapctl get ldap-enable)
ldap_needtls=$(snapctl get ldap-needtls)
email_alert=$(snapctl get email-alert)
telegram_alert=$(snapctl get telegram-alert)
slack_alert=$(snapctl get slack-alert)
use_remote_runner=$(snapctl get use-remote-runner)

if [ -z "$dialect" ]
then
  dialect=bolt
  snapctl set dialect="$dialect"
fi

if [ -z "$cookie_hash" ]
then
  cookie_hash=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 32 ; echo '')
  snapctl set cookie-hash="$cookie_hash"
fi

if [ -z "$cookie_encryption" ]
then
  cookie_encryption=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 32 ; echo '')
  snapctl set cookie-encryption="$cookie_encryption"
fi

if [ -z "$runner_registration_token" ]
then
  runner_registration_token=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 32 ; echo '')
  snapctl set runner-registration-token="$runner_registration_token"
fi

if [ -z "$max_parallel_tasks" ]
then
  max_parallel_tasks=0
  snapctl set max-parallel-tasks="$max_parallel_tasks"
fi

if [ -z "$email_secure" ]
then
  email_secure=false
  snapctl set email-secure="$email_secure"
fi

if [ -z "$email_alert" ]
then
  email_alert=false
  snapctl set email-alert="$email_alert"
fi

if [ -z "$telegram_alert" ]
then
  telegram_alert=false
  snapctl set telegram-alert="$telegram_alert"
fi

if [ -z "$slack_alert" ]
then
  slack_alert=false
  snapctl set slack-alert="$slack_alert"
fi

if [ -z "$use_remote_runner" ]
then
  use_remote_runner=false
  snapctl set use-remote-runner="$use_remote_runner"
fi

if [ -z "$ldap_enable" ]
then
  ldap_enable=false
  snapctl set ldap-enable="$ldap_enable"
fi

if [ -z "$ldap_needtls" ]
then
  ldap_needtls=false
  snapctl set ldap-needtls="$ldap_needtls"
fi

tee "$SNAP_USER_COMMON/config.json" <<CONFIG
{
 	"mysql": {
 		"host": "${mysql_host}",
 		"user": "${mysql_user}",
 		"pass": "${mysql_pass}",
 		"name": "${mysql_name}"
 	},
 	"postgres": {
 		"host": "${postgres_host}",
 		"user": "${postgres_user}",
 		"pass": "${postgres_pass}",
 		"name": "${postgres_name}"
 	},
 	"bolt": {
 		"host": "${SNAP_USER_COMMON}/database.boltdb"
 	},
	"dialect":				"${dialect}",
 	"port": 				"${port}",
 	"interface": 			"${interface}",
 	"tmp_path": 			"${SNAP_USER_COMMON}/repositories",
 	"cookie_hash": 			"${cookie_hash}",
 	"cookie_encryption": 	"${cookie_encryption}",
 	"access_key_encryption":"${access_key_encryption}",
 	"email_sender": 				"${email_sender}",
 	"email_host": 					"${email_host}",
 	"email_port": 					"${email_port}",
 	"email_secure": 				${email_secure},
 	"email_username": 			"${email_username}",
 	"email_password": 			"${email_password}",
 	"web_host": 						"${web_host}",
 	"ldap_binddn": 					"${ldap_binddn}",
 	"ldap_bindpassword": 		"${ldap_bindpassword}",
 	"ldap_server": 					"${ldap_server}",
 	"ldap_searchdn": 				"${ldap_searchdn}",
 	"ldap_searchfilter": 		"${ldap_searchfilter}",
 	"ldap_mappings": {
 		"dn": 	"${ldap_mappings_dn}",
 		"mail": "${ldap_mappings_mail}",
 		"uid": 	"${ldap_mappings_uid}",
 		"cn": 	"${ldap_mappings_cn}"
 	},
 	"telegram_chat": 				"${telegram_chat}",
 	"telegram_token": 			"${telegram_token}",
 	"concurrency_mode": 		"${concurrency_mode}",
 	"max_parallel_tasks": 	${max_parallel_tasks},
 	"email_alert": 					${email_alert},
 	"telegram_alert": 			${telegram_alert},
 	"slack_alert": 					${slack_alert},
 	"ldap_enable": 					${ldap_enable},
 	"ldap_needtls": 				${ldap_needtls},
 	"use_remote_runner": 		${use_remote_runner},
	"git_client":           "go_git",
	
	"runner_registration_token": ${runner_registration_token}"
}
CONFIG

if [ -d $SNAP_USER_COMMON/ansible_env ]
then
	version=$(cat "${SNAP_USER_COMMON}/ansible_env/semaphore_snap_revision")
	if [ 219 -gt "$version" ]
	then
		rm -rf "${SNAP_USER_COMMON}/ansible_env"
		rm -rf "${SNAP_USER_COMMON}/repositories"
	fi
fi

mkdir -p ${SNAP_USER_COMMON}/repositories

if [ ! -d $SNAP_USER_COMMON/ansible_env ] || [ ! "$(ls -A $SNAP_USER_COMMON/ansible_env)" ]
then
	tar xvzf $SNAP/ansible_env.tar.gz -C $SNAP_USER_COMMON

	sed -i "s@^VIRTUAL_ENV=.*@VIRTUAL_ENV=\"$SNAP_USER_COMMON/ansible_env\"@g" $SNAP_USER_COMMON/ansible_env/bin/activate

 	find $SNAP_USER_COMMON/ansible_env/bin -type f -exec sed -i "s@/root/parts/ansible/build/ansible_env/@$SNAP_USER_COMMON/ansible_env/@g" {} \;

 	find $SNAP_USER_COMMON/ansible_env/bin -type f -exec sed -i "s@/build/semaphore/parts/ansible/build/ansible_env/@$SNAP_USER_COMMON/ansible_env/@g" {} \;

 	echo $SNAP_REVISION > $SNAP_USER_COMMON/ansible_env/semaphore_snap_revision
fi

python_path=$(which python3)

ln -sf "${python_path}" "${SNAP_USER_COMMON}/ansible_env/bin/python3"

export ANSIBLE_HOST_KEY_CHECKING=False
export ANSIBLE_STDOUT_CALLBACK=yaml
export ANSIBLE_LOAD_CALLBACK_PLUGINS=yes
export ANSIBLE_LOCAL_TEMP=/tmp
export ANSIBLE_CONFIG=$SNAP_USER_COMMON/ansible.cfg

tee "$SNAP_USER_COMMON/ansible.cfg" <<CONFIG
[defaults]
host_key_checking = False
stdout_callback = yaml
bin_ansible_callbacks = yes
local_tmp = /tmp
remote_tmp = /tmp
[ssh_connection]
transfer_method = piped
CONFIG

source $SNAP_USER_COMMON/ansible_env/bin/activate

semaphore service --config "$SNAP_USER_COMMON/config.json"

