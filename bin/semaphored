#!/bin/bash

declare -A options=(
  [dialect]=""
  [mysql_host]=""
  [mysql_user]=""
  [mysql_name]=""
  [mysql_pass]=""
  [postgres_host]=""
  [postgres_user]=""
  [postgres_name]=""
  [postgres_pass]=""
  [port]=""
  [interface]=""
  [cookie-hash]=""
  [cookie-encryption]=""
  [email-sender]=""
  [email-host]=""
  [email-port]=""
  [web-host]=""
  [ldap-binddn]=""
  [ldap-bindpassword]=""
  [ldap-server]=""
  [ldap-searchdn]=""
  [ldap-searchfilter]=""
  [ldap-mappings_dn]=""
  [ldap-mappings_mail]=""
  [ldap-mappings_uid]=""
  [ldap-mappings_cn]=""
  [telegram-chat]=""
  [telegram-token]=""
  [concurrency-mode]=""
  [max-parallel-tasks]=""
)



for i in "${!options[@]}"
do
  options[$i]=$(snapctl get "$i")
done


for i in "${!options[@]}"
do
  if [ -z "${options[$i]}" ]
  then
    snapctl set "$i"="${options[$i]}"
  fi
done



if [ -z "${options[dialect]}" ]
then
  options[dialect]=bolt
  snapctl set dialect="${options[dialect]}"
fi

if [ -z "${options[cookie-hash]}" ]
then
  cookie_hash=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 32 ; echo '')
  snapctl set cookie-hash="$cookie_hash"
fi

if [ -z "$cookie_encryption" ]
then
  cookie_encryption=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 32 ; echo '')
  snapctl set cookie-encryption="$cookie_encryption"
fi

if [ -z "$max_parallel_tasks" ]
then
  max_parallel_tasks=0
  snapctl set max-parallel-tasks="$max_parallel_tasks"
fi

if [ -z "$email_alert" ]
then
  email_alert=false
  snapctl set email-alert="$email_alert"
fi

if [ -z "$telegram_alert" ]
then
  telegram_alert=false
  snapctl set telegram-alert="$telegram_alert"
fi

if [ -z "$ldap_enable" ]
then
  ldap_enable=false
  snapctl set ldap-enable="$ldap_enable"
fi

if [ -z "$ldap_needtls" ]
then
  ldap_needtls=false
  snapctl set ldap-needtls="$ldap_needtls"
fi



mkdir -p ${SNAP_USER_COMMON}/repositories

tee "$SNAP_USER_COMMON/config.json" <<CONFIG
{
 	"mysql": {
 		"host": "${options[mysql_host]}",
 		"user": "${options[mysql_user]}",
 		"pass": "${options[mysql_pass]}",
 		"name": "${options[mysql_name]}"
 	},
 	"postgres": {
 		"host": "${options[postgres_host]}",
 		"user": "${options[postgres_user]}",
 		"pass": "${options[postgres_pass]}",
 		"name": "${options[postgres_name]}"
 	},
 	"bolt": {
 		"host": "${SNAP_USER_COMMON}/database.boltdb"
 	},
	"dialect":				"${options[dialect]}",
 	"port": 				"${options[port]}",
 	"interface": 			"${options[interface]}",
 	"tmp_path": 			"${SNAP_USER_COMMON}/repositories",
 	"cookie_hash": 			"${options[cookie-hash]}",
 	"cookie_encryption": 	"${options[cookie-encryption]}",
 	"email_sender": 		"${options[email-sender]}",
 	"email_host": 			"${options[email-host]}",
 	"email_port": 			"${options[email-port]}",
 	"web_host": 			"${web-host}",
 	"ldap_binddn": 			"${ldap-binddn}",
 	"ldap_bindpassword": 	"${ldap-bindpassword}",
 	"ldap_server": 			"${ldap-server}",
 	"ldap_searchdn": 		"${ldap-searchdn}",
 	"ldap_searchfilter": 	"${ldap-searchfilter}",
 	"ldap_mappings": {
 		"dn": 	"${ldap-mappings_dn}",
 		"mail": "${ldap-mappings_mail}",
 		"uid": 	"${ldap-mappings_uid}",
 		"cn": 	"${ldap-mappings_cn}"
 	},
 	"telegram_chat": 		"${telegram-chat}",
 	"telegram_token": 		"${telegram-token}",
 	"concurrency_mode": 	"${concurrency-mode}",
 	"max_parallel_tasks": 	${max-parallel-tasks},
 	"email_alert": 			${email-alert},
 	"telegram_alert": 	${telegram-alert},
 	"ldap_enable": 			${ldap-enable},
 	"ldap_needtls": 		${ldap-needtls}
}
CONFIG

if [ -d $SNAP_USER_COMMON/ansible_env ] && [ ! -f $SNAP_USER_COMMON/ansible_env/semaphore_snap_revision ]
then
  mv $SNAP_USER_COMMON/ansible_env $SNAP_USER_COMMON/ansible_env_backup_90_$RANDOM
  sleep 1
fi

if [ ! -d $SNAP_USER_COMMON/ansible_env ] || [ ! "$(ls -A $SNAP_USER_COMMON/ansible_env)" ]
then
	tar xvzf $SNAP/ansible_env.tar.gz -C $SNAP_USER_COMMON

	sed -i "s@^VIRTUAL_ENV=\".*@VIRTUAL_ENV=\"$SNAP_USER_COMMON/ansible_env\"@g" $SNAP_USER_COMMON/ansible_env/bin/activate

 	find $SNAP_USER_COMMON/ansible_env/bin -type f -exec sed -i "s@/root/parts/ansible/build/ansible_env/@$SNAP_USER_COMMON/ansible_env/@g" {} \;

 	find $SNAP_USER_COMMON/ansible_env/bin -type f -exec sed -i "s@/build/semaphore/parts/ansible/build/ansible_env/@$SNAP_USER_COMMON/ansible_env/@g" {} \;

 	echo $SNAP_REVISION > $SNAP_USER_COMMON/ansible_env/semaphore_snap_revision
fi

ln -sf $SNAP/usr/bin/python3 $SNAP_USER_COMMON/ansible_env/bin/python3

export ANSIBLE_HOST_KEY_CHECKING=False
export ANSIBLE_STDOUT_CALLBACK=yaml
export ANSIBLE_LOAD_CALLBACK_PLUGINS=yes
export ANSIBLE_LOCAL_TEMP=/tmp
export ANSIBLE_CONFIG=$SNAP_USER_COMMON/ansible.cfg

tee "$SNAP_USER_COMMON/ansible.cfg" <<CONFIG
[defaults]
host_key_checking = False
stdout_callback = yaml
bin_ansible_callbacks = yes
local_tmp = /tmp
CONFIG

source $SNAP_USER_COMMON/ansible_env/bin/activate

semaphore service --config "$SNAP_USER_COMMON/config.json"

